<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Enhanced 3D Tornado Simulator</title>
  <style>
    body { margin: 0; overflow: hidden; background: #1e1e1e; }
    canvas { display: block; }
    #controls { position: absolute; top: 10px; left: 10px; color: white; z-index: 10; }
    input[type="range"] { width: 100%; }
  </style>
</head>
<body>
  <div id="controls">
    <label for="windSpeed">Wind Speed (mph): <span id="windValue">100</span></label>
    <input type="range" id="windSpeed" min="50" max="300" value="100">
    <br>
    <label for="tornadoWidth">Tornado Width (miles): <span id="widthValue">0.5</span></label>
    <input type="range" id="tornadoWidth" min="0.1" max="2.6" value="0.5" step="0.1">
    <br>
    <label for="lightningFreq">Lightning Frequency: <span id="lightningValue">5</span></label>
    <input type="range" id="lightningFreq" min="1" max="10" value="5">
    <br>
    <button id="startBtn">Start Tornado</button>
    <button id="resetBtn">Reset Scene</button>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    let scene, camera, renderer;
    let tornado, ground, lightning, dustClouds = [];
    let windSpeed = 100, tornadoWidth = 0.5, lightningFreq = 5;
    let tornadoActive = false, lastLightningTime = 0;

    // Scene Setup
    function init() {
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      renderer = new THREE.WebGLRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      // Ground
      const groundGeometry = new THREE.PlaneGeometry(5000, 5000);
      const groundMaterial = new THREE.MeshBasicMaterial({ color: 0x228B22, side: THREE.DoubleSide });
      ground = new THREE.Mesh(groundGeometry, groundMaterial);
      ground.rotation.x = Math.PI / 2;
      scene.add(ground);

      // Camera Position
      camera.position.set(0, 200, 500);
      camera.lookAt(0, 0, 0);

      // Event Listeners
      document.getElementById('windSpeed').addEventListener('input', (e) => {
        windSpeed = e.target.value;
        document.getElementById('windValue').textContent = windSpeed;
      });
      document.getElementById('tornadoWidth').addEventListener('input', (e) => {
        tornadoWidth = e.target.value;
        document.getElementById('widthValue').textContent = tornadoWidth;
      });
      document.getElementById('lightningFreq').addEventListener('input', (e) => {
        lightningFreq = e.target.value;
        document.getElementById('lightningValue').textContent = lightningFreq;
      });
      document.getElementById('startBtn').addEventListener('click', startTornado);
      document.getElementById('resetBtn').addEventListener('click', resetScene);

      // Resize Listener
      window.addEventListener('resize', onWindowResize);

      animate();
    }

    // Window Resize Handler
    function onWindowResize() {
      renderer.setSize(window.innerWidth, window.innerHeight);
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
    }

    // Start Tornado
    function startTornado() {
      tornadoActive = true;
      createTornado();
    }

    // Reset Scene
    function resetScene() {
      tornadoActive = false;
      scene.clear();
      init();
    }

    // Create Tornado
    function createTornado() {
      if (!tornadoActive) return;

      // Tornado Funnel
      const funnelGeometry = new THREE.CylinderGeometry(0, 100, 200, 32, 1, true);
      const funnelMaterial = new THREE.MeshBasicMaterial({ color: 0x888888, wireframe: true });
      tornado = new THREE.Mesh(funnelGeometry, funnelMaterial);
      tornado.position.set(0, 100, 0);
      scene.add(tornado);

      // Dust Clouds
      for (let i = 0; i < 10; i++) {
        const dustGeometry = new THREE.SphereGeometry(5, 16, 16);
        const dustMaterial = new THREE.MeshBasicMaterial({ color: 0xaaaaaa });
        const dust = new THREE.Mesh(dustGeometry, dustMaterial);
        dust.position.set(Math.random() * 500 - 250, 5, Math.random() * 500 - 250);
        dustClouds.push(dust);
        scene.add(dust);
      }
    }

    // Lightning Effect
    function createLightning() {
      if (Date.now() - lastLightningTime > 1000 / lightningFreq) {
        lastLightningTime = Date.now();
        const lightningGeometry = new THREE.CylinderGeometry(1, 1, Math.random() * 200 + 100, 8);
        const lightningMaterial = new THREE.MeshBasicMaterial({ color: 0x00ffff });
        lightning = new THREE.Mesh(lightningGeometry, lightningMaterial);
        lightning.position.set(Math.random() * 500 - 250, Math.random() * 200 + 100, Math.random() * 500 - 250);
        scene.add(lightning);
        setTimeout(() => {
          scene.remove(lightning);
        }, 100);
      }
    }

    // Dust Cloud Movement
    function moveDustClouds() {
      dustClouds.forEach(dust => {
        dust.position.x += (Math.random() - 0.5) * windSpeed / 100;
        dust.position.z += (Math.random() - 0.5) * windSpeed / 100;
      });
    }

    // Tornado Movement
    function moveTornado() {
      if (!tornadoActive) return;
      tornado.rotation.y += 0.01;
      tornado.position.x += Math.sin(tornado.rotation.y) * windSpeed / 50;
      tornado.position.z += Math.cos(tornado.rotation.y) * windSpeed / 50;
    }

    // Animation Loop
    function animate() {
      requestAnimationFrame(animate);
      if (tornadoActive) {
        moveTornado();
        moveDustClouds();
        createLightning();
      }
      renderer.render(scene, camera);
    }

    // Initialize Scene
    init();
  </script>
</body>
</html>
